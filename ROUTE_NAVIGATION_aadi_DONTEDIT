//define if within a route
bool insideRoute = true;

int currentRoute = 0; // Tracks the current route
int indexInsideRoute = 0; //tracks within




// Define routes 
String pick_up_1[3] = {"Left", "Right", "Block_Detection"};// START to pickup 1
String drop_off_1_green[5] = {"Reverse", "Left", "Left", "Drop_Block", "Turn_180_Left"};// pick up 1 to green
String drop_off_1_red[6] = {"Reverse", "Right", "Forward_FR", "Right", "Drop_Block", "Turn_180_Right"};//pick up 1 to red
String pick_up_2_green[6] = {"Turn_180_Left", "Forward_RF", "Right", "Forward_FL", "Right", "Block_Detection"};// green to 2
String pick_up_2_red[4] = {"Forward_FL", "Left", "Left", "Block_Detection"};//red to 2
String drop_off_2_green[7] = {"Reverse", "Right", "Forward_FR", "Left", "Forward_FL", "Drop_Block", "Turn_180_Left"};// 2 to green
String drop_off_2_red[6] = {"Reverse", "Left", "Right", "Forward_FR", "Drop_Block", "Turn_180_Right"};// 2 to red
String pick_up_3_green[5] = {"Forward_FR", "Right", "Left", "Left", "Block_Detection"};// green to 3
String pick_up_3_red[6] = {"Forward_FL", "Left", "Forward_FL", "Right", "Left", "Block_Detection"};// red to 3
String drop_off_3_green[7] = {"Reverse", "Left", "Right", "Left", "Forward_FL", "Drop_Block", "Turn_180_Left"};// 3 to green
String drop_off_3_red[8] = {"Reverse", "Left", "Left", "Forward_FR", "Right", "Forward_FR", "Drop_Block", "Turn_180_Right"};// 3 to red
String pick_up_4_green[5] = {"Forward_FR", "Forward_FR", "Forward_FR", "Right", "Block_Detection"};// green to 4
String pick_up_4_red[4] = {"Forward_FL", "Forward_FL", "Left", "Block_Detection"};// red to 4
String drop_off_4_green[7] = {"Reverse", "Right", "Forward_FL", "Forward_FL", "Forward_FL", "Drop_Block", "Turn_180_Left"};// 4 to green
String drop_off_4_red[6] = {"Reverse", "Left", "Forward_FR", "Forward_FR", "Drop_Block", "Turn_180_Right"};// 4 to red
String return_to_start_green[4] = {"Right", "Forward_FL", "Right", "Turn_180_END"};// green to Start
String return_to_start_red[3] = {"Left", "Left", "Turn_180_END"};// red to Start

// Array of pointers to each route array for easier iteration
String *routes[17] = {pick_up_1, drop_off_1_green, drop_off_1_red, pick_up_2_green, pick_up_2_red, drop_off_2_green, drop_off_2_red, pick_up_3_green, pick_up_3_red, drop_off_3_green, drop_off_3_red, pick_up_4_green, pick_up_4_red, drop_off_4_green, drop_off_4_red, return_to_start_green, return_to_start_red};
int routeSizes[17] = {3, 5, 6, 6, 4, 7, 6, 5, 6, 7, 8, 5, 4, 7, 6, 4, 3};




bool red = true;//colour red or (if not) black
bool black = false;//colour red or (if not) black




bool left = false;
bool right = false;
bool reverse = false;
bool left_180 = false;//180 turn left
bool right_180 = false;//180 turn right
bool detect_wall = false;
bool detect_block = false;

bool set_next_action = true;// set to true after turn, block pick up, block drop off, when reverse is set to false from true (i.e., in the turn code)


//Main Logic with Initialization and Dynamic Route Transition
void setup() {
  Serial.begin(9600); // Initialize serial communication
  Serial.println("");
  Serial.println("STARTING ...");
  // Initialize motors, sensors, etc.
}

void loop() {

  // for testing sake, remove in actual
  set_next_action = true;
  delay(1000);
  //

  
  if (insideRoute == false){
    //Serial.println("HELOO");
    int index = (currentRoute+1)/2;//integer division i.e., 3/2 == 1
    
    // Execute routes sequentially, checking completion
    if ((2*index + 1) > 16) {
      //STOP MOVING AND DELAY
      Serial.println("");
      Serial.println("All routes completed.");
      Serial.println("");
      delay(100000);
      // trigger reverseFORSETTIME function
    } 
    else {
      
      

      //else this code
      
      // FOR COLOUR
      if (currentRoute == 1 || currentRoute == 2){
        red = true;
        black = false;
      }
      else if (currentRoute == 3|| currentRoute == 4 || currentRoute == 5 || currentRoute == 6){
        red = false;
        black = true;
      }
      else if (currentRoute == 7|| currentRoute == 8 || currentRoute == 9 || currentRoute == 10){
        red = false;
        black = true;
      }
      else if (currentRoute == 11|| currentRoute == 12 || currentRoute == 13 || currentRoute == 14){
        red = true;
        black = false;
      }
      //
      
      
      
      if (black == true){
        currentRoute = (2*index + 1);//green route
      }
      else if (red == true){
        currentRoute = (2*index + 2);//green route
      }
      insideRoute = true;
      indexInsideRoute = 0;
      Serial.println(currentRoute);
    }
  }
  if (insideRoute == true && set_next_action == true){
    set_next_action = false;
    
    
    String action = routes[currentRoute][indexInsideRoute];
    Serial.println(action);

    if (action == "Left"){
      left = true;
    }
    else if (action == "Right"){
      right = true;
    }
    else if (action == "Turn_180_END"){// go back a bit (off start block), spin around, reverse after

      Serial.println("AT END doing turn ....");

      left_180 = true;
    }
    else if (action == "Forward_FL"){
      left = false;//should just skip junction
    }
    else if (action == "Forward_FR"){
      right = false;//should just skip junction
    }
    else if (action == "Reverse"){
      reverse = true;
    }
    else if (action == "Turn_180_Left"){
      left_180 = true;
    }
    else if (action == "Turn_180_Right"){
      right_180 = true;
    }
    else if (action == "Drop_Block"){
      detect_wall = true;
    }
    else if (action == "Block_Detection"){
      detect_block = true;
    }




    if (indexInsideRoute + 1 == routeSizes[currentRoute]){//on last task of route
      insideRoute = false;
      Serial.println("Finished route");
      Serial.println("");
    }
    indexInsideRoute ++;
    
  }
  

  // Add any continuous monitoring or additional tasks outside route execution
} 
