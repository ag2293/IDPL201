//Movement Enumeration and Route Definitions:
enum Movement {
  Forward, Reverse, Left, Right, Forward_FR, Forward_FL, Forward_RF, 
  Turn_180_Left, Turn_180_Right, Block_Detection, Drop_Block
};

// Define routes based on the given instructions
Movement route1[] = {Forward, Left, Forward, Right, Block_Detection};
Movement route2[] = {Reverse, Left, Forward, Left, Forward, Drop_Block, Turn_180_Left};
Movement route3[] = {Reverse, Right, Forward, Forward_FR, Right, Forward, Drop_Block};
Movement route4[] = {Turn_180_Left, Forward, Forward_RF, Right, Forward, Forward_FL, Right, Forward, Block_Detection};
Movement route5[] = {Forward, Forward_FL, Left, Forward, Left, Forward, Block_Detection};
Movement route6[] = {Reverse, Right, Forward, Forward_FR, Left, Forward, Forward_FL, Drop_Block, Turn_180_Left};
Movement route7[] = {Reverse, Left, Forward, Right, Forward, Forward_FR, Drop_Block, Turn_180_Right};
Movement route8[] = {Forward, Forward_FR, Right, Forward, Left, Forward, Left, Forward, Block_Detection};
Movement route9[] = {Forward, Forward_FL, Left, Forward, Forward_FL, Right, Forward, Left, Forward, Block_Detection};
Movement route10[] = {Reverse, Left, Forward, Right, Forward, Left, Forward, Forward_FL, Drop_Block, Turn_180_Left};
Movement route11[] = {Reverse, Left, Forward, Left, Forward, Forward_FR, Right, Forward, Forward_FR, Drop_Block, Turn_180_Right};
Movement route12[] = {Forward, Forward_FR, Forward_FR, Forward_FR, Right, Forward, Block_Detection, Forward, Forward_FR, Right, Forward, Left, Forward, Forward_FL, Right, Forward, Right, Forward, Block_Detection};
Movement route13[] = {Forward, Forward_FL, Forward_FL, Left, Forward, Block_Detection, Forward, Forward_FL, Left, Forward, Forward_FL, Right, Forward, Forward_FL, Right, Forward, Right, Forward, Block_Detection};
Movement route14[] = {Reverse, Right, Forward, Forward_FL, Forward_FL, Forward_FL, Drop_Block, Turn_180_Left};
Movement route15[] = {Reverse, Left, Forward, Forward_FR, Forward_FR, Drop_Block, Turn_180_Right};
Movement route16[] = {Forward, Right, Forward, Forward_FL, Left, Reverse};
Movement route17[] = {Forward, Left, Forward, Right, Reverse};

// Array of pointers to each route array for easier iteration
Movement* routes[] = {route1, route2, route3, route4, route5, route6, route7, route8, route9, route10, route11, route12, route13, route14, route15, route16, route17};
int routeSizes[] = {
  sizeof(route1)/sizeof(route1[0]), sizeof(route2)/sizeof(route2[0]), sizeof(route3)/sizeof(route3[0]), 
  sizeof(route4)/sizeof(route4[0]), sizeof(route5)/sizeof(route5[0]), sizeof(route6)/sizeof(route6[0]), 
  sizeof(route7)/sizeof(route7[0]), sizeof(route8)/sizeof(route8[0]), sizeof(route9)/sizeof(route9[0]), 
  sizeof(route10)/sizeof(route10[0]), sizeof(route11)/sizeof(route11[0]), sizeof(route12)/sizeof(route12[0]), 
  sizeof(route13)/sizeof(route13[0]), sizeof(route14)/sizeof(route14[0]), sizeof(route15)/sizeof(route15[0]), 
  sizeof(route16)/sizeof(route16[0]), sizeof(route17)/sizeof(route17[0])
};


// Track Route Completion
bool routesCompleted[17] = {false}; // Tracks completion of all 17 routes

void executeMovement(Movement move) {
  switch (move) {
    case Forward:
      moveForward();
      break;
    case Reverse:
      moveReverse();
      break;
    case Left:
      turnLeft();
      break;
    case Right:
      turnRight();
      break;
    case Forward_FR: // Assuming specific forward movements, adapt as necessary
      moveForwardFR();
      break;
    case Forward_FL:
      moveForwardFL();
      break;
    case Forward_RF:
      moveForwardRF();
      break;
    case Turn_180_Left:
      turn180Left();
      break;
    case Turn_180_Right:
      turn180Right();
      break;
    case Block_Detection:
      detectBlock();
      break;
    case Drop_Block:
      dropBlock();
      break;
  }
  // You may want to add a delay or additional logic after each movement
}
