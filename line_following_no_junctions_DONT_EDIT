// -----MOTOR INITILIASATION-------
#include <Adafruit_MotorShield.h>

//initalise motorshield
Adafruit_MotorShield AFMS = Adafruit_MotorShield();
// initalise motors
Adafruit_DCMotor *leftMotor = AFMS.getMotor(3);//M3 pin
Adafruit_DCMotor *rightMotor = AFMS.getMotor(4);//M4 pin




//initalise motor variables
int motorSpeed = 200;
int steeringMotorSpeed = 150;//CALIBRATE
int timeLength = 200; // define turning time
bool isMoving = false; // Tracks whether the robot is moving

// ----------------------------------

// -----LED INITILIASATION-------

bool LED = false;

/*
//initalise Led
#define movingLed 1
#define BLUE_LED_PIN 11 // Replace x with the actual pin number for the blue LED
*/

// ----------------------------------

// -----Line Sensor INITILIASATION-------

int left_line_sensor_pin=2; // left line sensor 
int right_line_sensor_pin=13; // right line sensor
int front_line_sensor_pin =11; // sensor on line at front 
//int back_line_sensor_pin =5; // sensor on line at back 

// ----------------------------------


bool resteer = true;// needs to resteer onto line --> either curved track or vehichle oriented wrong. BACK wheel drive so easier to self correct --> back doesn't move much even if front swings.
bool stop_moving = false;

// ----------------------------------



void setup() {
  
  // Start the motor shield
  AFMS.begin();
  // Set initial motor speed to 0
  leftMotor->setSpeed(0);
  rightMotor->setSpeed(0);

  // Initial direction
  leftMotor->run(FORWARD);
  rightMotor->run(FORWARD);
  

  pinMode(left_line_sensor_pin, INPUT); // initialize Right sensor as an inut
  pinMode(right_line_sensor_pin, INPUT); // initialize Left sensor as as input
  pinMode(front_line_sensor_pin, INPUT); // initialize front sensor as an inut
  //pinMode(back_line_sensor_pin, INPUT); // initialize back sensor as as input
  //attachInterrupt(digitalPinToInterrupt(front_line_sensor_pin), steer, LOW);// if front sensor not on line anymore either: T-junction, or needs to resteer onto line

  // Initialize Serial Communication at 9600 baud rate
  Serial.begin(9600);

  Serial.println("StART");

  delay(100); // Ensure serial communication is fully set up

  // Additional setup as needed
}


void loop() {

  int left_line_value = digitalRead(left_line_sensor_pin); // read left input value
  int right_line_value = digitalRead(right_line_sensor_pin); // read right input value
  int front_line_value = digitalRead(front_line_sensor_pin); // read front input value
  //Serial.println("Left sensor");
  //Serial.println(left_line_value);
  //Serial.println("front sensor");
  //Serial.println(front_line_value);
  //Serial.println("Right sensor");
  //Serial.println(right_line_value);
  //int back_line_value = digitalRead(back_line_sensor_pin); // read back input value
  //Serial.println(back_line_value);
  delay(50);

  //if (front_line_value == 1){// if front on line
  if (true){

    //
    /*if(left_line_value==0 && right_line_value==0 && back_line_value==1){ //FORWARD definetly oriented
      Serial.print("FORWARD FULL"); 
    }
    if(left_line_value==0 && right_line_value==0 && back_line_value==0){ //FORWARD slow as definetly veering off line
      Serial.print("FORWARD SLOW"); 
    }*/

    if(left_line_value==0 && right_line_value==0 && front_line_value == 1){ //FORWARD if correct at start
    Serial.println("FORWARD");
      moveForward();

      /*
      delay(5000);
      rightMotor->setSpeed(turnSteeringMotorSpeed);
      
      
      delay (3000);
      

      //increase right motor speed FUNCTION
      rightMotor->setSpeed(motorSpeed);
      */

    }
    else if (front_line_value == 0){
      //Serial.println("Not on line");
      steer();
      //stopMoving();
    }
    
  }
  
  
}






// DECLARE FUNCTIONS TO MOVE --


void moveForward() {
  //attachInterrupt(digitalPinToInterrupt(front_line_sensor_pin), steer, FALLING);// if front sensor not on line anymore either: T-junction, or needs to resteer onto line

  Serial.println("Moving forwards ...");
  //int left_line_value = digitalRead(left_line_sensor_pin); // read left input value
  //int right_line_value = digitalRead(right_line_sensor_pin); // read right input value

  isMoving = true; // Start moving
  leftMotor->setSpeed(motorSpeed);
  rightMotor->setSpeed(motorSpeed);
  //leftMotor->run(FORWARD);
  //rightMotor->run(FORWARD);

  leftMotor->run(BACKWARD);
  rightMotor->run(BACKWARD);
}


void stopMoving() {
  Serial.println("Stopping motion ...");
  isMoving = false;
  leftMotor->setSpeed(0);
  rightMotor->setSpeed(0);
  delay(1000);
}

void leftABit(){
  Serial.print("left a bit"); 

  Serial.print("test");
  leftMotor->setSpeed(steeringMotorSpeed/5);
  

  leftMotor->run(BACKWARD);

  rightMotor->setSpeed(steeringMotorSpeed);

  rightMotor->run(BACKWARD);

  
  
  
}


void rightABit(){
  Serial.print("right a bit"); 
  Serial.print(" "); 
  
  Serial.print("test"); 
  Serial.print(" "); 

  rightMotor->setSpeed(steeringMotorSpeed/5);

  rightMotor->run(BACKWARD);


  leftMotor->setSpeed(steeringMotorSpeed);
  

  leftMotor->run(BACKWARD);

  
  
  

  
}

void steer(){// Interrupt Service Routine

  //stopMoving();

  //detachInterrupt(digitalPinToInterrupt(front_line_sensor_pin));//
  int left_line_value = digitalRead(left_line_sensor_pin); // read left input value
  int right_line_value = digitalRead(right_line_sensor_pin); // read right input value
  
  //resteer = true;

  //while (digitalRead(left_line_sensor_pin) == 1 || digitalRead(right_line_sensor_pin) == 1) {//until either side sensor isn't on line, go forward
  if(left_line_value==1){ // if left on line TURN a bit left 
    leftABit();
    
  }
  else if(right_line_value==1){ // if right on line TURN a bit right 
    rightABit();

  }

  //}

  //resteer = false;

  
  //attachInterrupt(digitalPinToInterrupt(front_line_sensor_pin), steer, FALLING);// Keep checking for veering off line 

  

}
