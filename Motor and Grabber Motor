
// Initialize servo
Servo platform_servo;

int servo_pos = 0;

//initalise motorshield
Adafruit_MotorShield AFMS = Adafruit_MotorShield();
// initalise motors
Adafruit_DCMotor *leftMotor = AFMS.getMotor(1);
Adafruit_DCMotor *rightMotor = AFMS.getMotor(2);
Adafruit_DCMotor *grabberMotor = AFMS.getMotor(3);


//initalise motor variables
int motorSpeed = 250;
// define turning times,needs calibration
int timeLength = 200;    // calibration value


//initalise Led
#define movingLed 1
#define BLUE_LED_PIN 11 // Replace x with the actual pin number for the blue LED


// Tracks whether the robot is moving
bool isMoving = false; // Tracks whether the robot is moving


void setup() {
  // Start the motor shield
  AFMS.begin();
  // Set initial motor speed to 0
  leftMotor->setSpeed(0);
  rightMotor->setSpeed(0);
  grabberMotor->setSpeed(0);
  // Initial direction
  leftMotor->run(FORWARD);
  rightMotor->run(FORWARD);
  grabberMotor->run(FORWARD);

  // Initialize pin modes
  pinMode(BLUE_LED_PIN, OUTPUT);
  pinMode(movingLed, OUTPUT);
  pinMode(crossLed, OUTPUT);

  // Attach the servo to its control pin
  platform_servo.attach(1); // Ensure pin 9 is correct for your servo

  // Initialize Serial Communication at 9600 baud rate
  Serial.begin(9600);

  // Additional setup as needed
}

void flashBlueLED() {
  if (isMoving) {
    unsigned long currentMillis = millis();
    static unsigned long previousMillis = 0;
    const long interval = 250; // LED on/off interval set to 250ms for 2Hz flash rate

    if (currentMillis - previousMillis >= interval) {
      // save the last time we blinked the LED
      previousMillis = currentMillis;

      // if the LED is off turn it on and vice-versa:
      int ledState = digitalRead(BLUE_LED_PIN); 
      digitalWrite(BLUE_LED_PIN, !ledState); 
    }
  } else {
    digitalWrite(BLUE_LED_PIN, LOW); 
  }
}



// DECLARE FUNCTIONS TO MOVE --

void moveForwards (int x) {
  isMoving = true; // Start moving
  leftMotor->setSpeed(motorSpeed);
  rightMotor->setSpeed(motorSpeed);
  leftMotor->run(FORWARD);
  rightMotor->run(FORWARD);
  unsigned long moveEndTime = millis() + x;
  while (millis() < moveEndTime) {
      flashBlueLED();
  }
  isMoving = false;
  stopMoving(0);
  delay(x);
}

void moveBackwards (int x) {
  isMoving = true;
  leftMotor->setSpeed(motorSpeed);
  rightMotor->setSpeed(motorSpeed);
  leftMotor->run(BACKWARD);
  rightMotor->run(BACKWARD);
  unsigned long moveEndTime = millis() + x;
  while (millis() < moveEndTime) {
      flashBlueLED();
  }
  isMoving = false;
  stopMoving(0);
  delay(x);
}

void stopMoving (int x) {
  leftMotor->setSpeed(0);
  rightMotor->setSpeed(0);
  delay(x);
}

void turnRight (int x) {
  isMoving = true;
  leftMotor->setSpeed(motorSpeed);
  rightMotor->setSpeed(0);
  leftMotor->run(FORWARD);
  rightMotor->run(BACKWARD);
  unsigned long moveEndTime = millis() + x;
  while (millis() < moveEndTime) {
      flashBlueLED();
  }
  isMoving = false;
  stopMoving(0);
  delay(x);
}

void turnLeft (int x) {
  isMoving = true;
  leftMotor->setSpeed(0);
  rightMotor->setSpeed(motorSpeed);
  leftMotor->run(BACKWARD);
  rightMotor->run(FORWARD);
  unsigned long moveEndTime = millis() + x;
  while (millis() < moveEndTime) {
      flashBlueLED();
  }
  isMoving = false;
  stopMoving(0);
  delay(x);
}

void turn180 (int x) {
  isMoving = true;
  leftMotor->setSpeed(motorSpeed);
  rightMotor->setSpeed(motorSpeed);
  leftMotor->run(BACKWARD);
  rightMotor->run(FORWARD);
  unsigned long moveEndTime = millis() + x;
  while (millis() < moveEndTime) {
      flashBlueLED();
  }
  isMoving = false;
  stopMoving(0);
  delay(x);
}

// stationery turn right 
void turn180_right (int x) {
  isMoving = true;
  leftMotor->setSpeed(motorSpeed);
  rightMotor->setSpeed(motorSpeed);
  leftMotor->run(FORWARD);
  rightMotor->run(BACKWARD);
  unsigned long moveEndTime = millis() + x;
  while (millis() < moveEndTime) {
      flashBlueLED();
  }
  isMoving = false;
  stopMoving(0);
  delay(x);
}

void grabber_motor_close () { 
  grabberMotor-> setSpeed(255);
  delay(950);
  grabberMotor-> setSpeed(0);
}


void grabber_motor_open () {
  grabberMotor-> setSpeed(255);
  grabberMotor -> run(BACKWARD);
  delay(900);
  grabberMotor-> setSpeed(0);
}

void servo_down () {
    for (servo_pos = 0; servo_pos <= 90; servo_pos += 1) { // goes from 0 degrees to 180 degrees
    // in steps of 1 degree
    platform_servo.write(servo_pos);              // tell servo to go to position in variable 'pos'
    delay(50);                       // waits 15ms for the servo to reach the position
  }
}

void servo_up () {

  for (servo_pos = 90; servo_pos >= 0; servo_pos -= 1) { // goes from 0 degrees to 180 degrees
    // in steps of 1 degree // minus 1
    platform_servo.write(servo_pos);              // tell servo to go to position in variable 'pos'
    delay(50);                       // waits 15ms for the servo to reach the position
}
}

//for now, I have properly write this paragraph yet so I make the whole paragraph become annotation 
/*
void pickup_bolck() {
   stopmoving(3000);
   servo_down();
   grabber_motor_close(); //?
   servo_up();
   delay(50);
//adjust later for the following lines   
   if (isRed = true);
   digitalWrite(xxx,HIGH);
   else 
   digitalWrite(xxxx,LOW);

}
*/
